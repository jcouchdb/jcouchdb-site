#labels Featured
How to use jcouchdb in your java applications.

= Introduction =

couchdb supports nearly all features of couchdb 0.8 except bulk document creation which will soon follow.

= The Database class =

The [http://jcouchdb.googlecode.com/svn/trunk/src/org/jcouchdb/db/Database.java org.jcouchdb.db.Database] class is your main point of interaction with couchdb. 
Let's see some simple code:

{{{
    // create a database object pointing to the database "mycouchdb" on the local host    
    Database db = new Database("localhost", "mycouchdb");

    // create a hash map document with two fields    
    Map<String,String> doc = new HashMap<String, String>();
    doc.put("foo", "value for the foo attribute");
    doc.put("bar", "value for the bar attribute");

    // create the document in couchdb
    db.createDocument(doc);
}}}

This creates a simple Document with two fields based on a !HashMap. Note that the database has to already exist for it to work. Databases can be created via Futon or with the [http://jcouchdb.googlecode.com/svn/trunk/src/org/jcouchdb/db/ServerImpl.java org.jcouchdb.db.ServerImpl] class.

== Documents ==

Jcouchdb offers many different ways of using java classes as !CouchDB documents. 
You can work totally schema-free and without any type constraint and use a Java object graph composed of list and map instances or you can use your own Java classes with strict type constraints or you can have something in between. it's your choice.

Jcouchdb depends on the [http://code.google.com/p/svenson/ svenson JSON library] which in fact used to be a part of jcouchdb.

To fully understand the possibilities of working with svenson you should go and read the [http://code.google.com/p/svenson/w/list svenson documentation]. Here I will only show you the jcouchdb specific parts.

First there is the [http://jcouchdb.googlecode.com/svn/trunk/src/org/jcouchdb/document/Document.java org.jcouchdb.document.Document] interface which you can implement in your Documents. You don't have to implement it, but your classes will need to have a property "_id" and a property "_rev" which are also the prerequisites for working with CouchDB.

{{{
package org.jcouchdb.document;

import org.svenson.JSONProperty;
/**
 * Interface for Documents used with jcouchdb.
 *
 * You don't actually have to implement Document, but your class needs
 * to be able to be fed both "_id" and "_rev" properties -- but without
 * those properties you cannot really work with couchdb anyway.
 *
 * @author shelmberger
 *
 */
public interface Document
{

    @JSONProperty( value = "_id", ignoreIfNull = true)
    String getId();

    void setId(String id);

    @JSONProperty( value = "_rev", ignoreIfNull = true)
    String getRevision();

    void setRevision(String revision);

}
}}}